version: '3.8'

services:
  api:
    build: .
    container_name: messenger-api
    restart: always
    env_file:
      - .env
    volumes:
      - ./app:/app
    ports:
      - "8007:8000"
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_WAITING_QUEUE=${RABBITMQ_WAITING_QUEUE}
      - RABBITMQ_PROCESSING_QUEUE=${RABBITMQ_PROCESSING_QUEUE}
      - RABBITMQ_DLX_NAME=${RABBITMQ_DLX_NAME}
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - api-network

  db:
    image: mysql:5.7
    container_name: messenger-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - messenger_db_data:/var/lib/mysql
    networks:
      - api-network

  redis:
    image: redis:8.0.0
    container_name: messenger-redis
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - api-network

    command: redis-server --requirepass ${REDIS_PASSWORD}

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: messenger-rabbitmq
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5673:5672
      - "15673:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  api-network:
    driver: bridge

volumes:
  messenger_db_data:
  redis_data:
  rabbitmq_data:
